---

- name: check if user is cluster admin
  shell: "oc get project default"
  register: default_project_result
  ignore_errors: true
  changed_when: false

- fail:
    msg: "User does not have cluster-admin rights to install software"
  when: default_project_result is failed

# ####### Start of Installation of Apicurio Studio, Microcks, 3scale and Persistent RHSSO  ############## #

- name: "Create project"
  shell: "oc new-project {{ocp_project}} --description='{{project_description}}' --display-name={{ocp_project}}"

- name: "Label namespace"
  command: "oc label namespace {{ocp_project}} AAD='{{lab_name}}'"

- name: Make sure we go back do default project
  shell: "oc project default"


- name: Annotate the empty project as requested by user
  shell: "oc annotate namespace {{ocp_project}} openshift.io/requester={{ocp_username}} --overwrite"


- name: Add the view role to the default service account
  shell: "oc policy add-role-to-user view -z default -n {{ocp_project}}"

- name: Give ocp_username access to Lab Infra project; user = {{ocp_username}}
  shell: "oc policy add-role-to-user admin {{ocp_username}} -n {{ocp_project}}"



#####	Persistent RHSSO

- name: Create SSO Service Account
  shell: "oc create serviceaccount sso-service-account -n {{ocp_project}}"

- name: Give service account access to Lab Infra project
  shell: "oc policy add-role-to-user view system:serviceaccount:{{ocp_project}}:sso-service-account"

- name: Create RHSSO template
  shell: "oc create -f {{persistent_sso_template_url}} -n {{ocp_project}}"

- name: Create RHSSO app
  shell: "oc new-app --template=sso72-x509-mysql-persistent --param=SSO_ADMIN_USERNAME={{SSO_ADMIN_USERNAME}} --param=SSO_ADMIN_PASSWORD={{SSO_ADMIN_PASSWORD}}  --param=HOSTNAME_HTTP={{SSO_HOSTNAME_HTTP}} --param=HOSTNAME_HTTPS={{SSO_HOSTNAME_HTTPS}} -n {{ocp_project}}"
- pause:
    seconds: 5

- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - sso
      - sso-mysql

##  RH SSO Realms & OAuthClient

- name: Process RHSSO Realm template
  shell: "oc process -f {{sso_oauth_realm_template_url}}  --param=OPENSHIFT_MASTER={{OPENSHIFT_MASTER}} --param=KEYCLOAK_ROUTE_HOSTNAME={{SSO_HOSTNAME_HTTP}} --param=MICROCKS_ROUTE_HOSTNAME={{MICROCKS_ROUTE_HOSTNAME}} --param=APICURIO_UI_ROUTE_HOSTNAME=http://{{APICURIO_UI_ROUTE}} --param=OPENSHIFT_OAUTH_CLIENT_NAME={{OPENSHIFT_OAUTH_CLIENT_NAME}} -n {{ocp_project}}| oc create -f - -n {{ocp_project}} "



#####	Apicurio

- name: Create Apicurio Studio template
  shell: "oc create -f {{apibiz_url}}/apicurio-template.yml -n {{ocp_project}}"

- name: Create Apicurio Studio app
  shell: "oc new-app --template=apicurio-studio --param=AUTH_ROUTE=http://{{SSO_HOSTNAME_HTTP}}/auth --param=UI_ROUTE={{APICURIO_UI_ROUTE}} --param=API_ROUTE={{APICURIO_API_ROUTE}} --param=WS_ROUTE={{APICURIO_WS_ROUTE}} --param=API_JVM_MAX=2000m --param=API_MEM_LIMIT=3000Mi --param=WS_JVM_MAX=2000m --param=WS_MEM_LIMIT=2500Mi --param=UI_JVM_MAX=1800m --param=UI_MEM_LIMIT=2500Mi -n {{ocp_project}}"
- pause:
    seconds: 5
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - apicurio-studio-api
      - apicurio-studio-ui
      - apicurio-studio-ws
      - postgresql



#####	Microcks

- name: Create Microcks template
  shell: "oc create -f {{apibiz_url}}/microcks-persistent-no-keycloak-template.yml -n {{ocp_project}}"

- name: Create Microcks app
  shell: "oc new-app --template=microcks-persistent-no-keycloak --param=APP_ROUTE_HOSTNAME={{MICROCKS_ROUTE_HOSTNAME}} --param=KEYCLOAK_ROUTE_HOSTNAME={{KEYCLOAK_ROUTE_HOSTNAME}} -n {{ocp_project}}"
- pause:
    seconds: 5
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - microcks
      - microcks-mongodb
      - microcks-postman-runtime

#### 3scale

- name: check if user is cluster admin
  shell: "oc get project default"
  register: default_project_result
  ignore_errors: true
  changed_when: false

- fail:
    msg: "User does not have cluster-admin rights"
  when: default_project_result is failed

- name: check if API Manager deployed
  shell: "oc get project {{API_MANAGER_NS}}"
  register: api_project_result
  ignore_errors: true
  changed_when: false

- name: "Create project {{ API_MANAGER_NS }}"
  shell: "oc adm new-project {{ API_MANAGER_NS }} --display-name={{ API_MANAGER_NS }} --admin={{ OCP_AMP_ADMIN_ID }}"
  when: api_project_result is failed

- name: Annotate the empty project as requested by user
  shell: "oc annotate namespace {{API_MANAGER_NS}} openshift.io/requester={{OCP_AMP_ADMIN_ID}} --overwrite"

- name: Make sure we go back do default project
  shell: "oc project default"
  when: api_project_result is failed

- name: Enable 3scale Service Discovery
  shell: "oc adm policy add-cluster-role-to-user view system:serviceaccount:{{API_MANAGER_NS}}:default"

# No longer relevant with 3scale 2.6;  Zync component now handles wildcard routes
#- name: Command to enable the wildcard routes in the OCP cluster for 3scale
#  shell: "oc set env dc/router ROUTER_ALLOW_WILDCARD_ROUTES=true -n default"
#  ignore_errors: true

################      Multitenant  API Manager        #####################

- name: "Make conditional variable based on {{is_shared_cluster}}"
  set_fact:
    threescale_template: "{{threescale_template_shared}}"
  when: is_shared_cluster|bool
- set_fact:
    threescale_template: "{{threescale_template_dedicated}}"
  when: not is_shared_cluster|bool

- name: Ensure {{work_dir}} exists
  file:
    path: "{{work_dir}}"
    state: directory

- name: Delete default limitrange
  shell: |
    oc delete limitrange {{API_MANAGER_NS}}-core-resource-limits -n {{API_MANAGER_NS}}
  ignore_errors: true

- name: Create a new limitrange
  template:
    src: templates/limitrange.yaml
    dest: "{{work_dir}}/limitrange.yaml"
- shell: |
    oc create -f {{work_dir}}/limitrange.yaml -n {{ API_MANAGER_NS }}

- name: "Create threescale-registry-auth image pull secret in {{ API_MANAGER_NS }}"
  shell: |
    oc create secret docker-registry threescale-registry-auth \
        --docker-server=registry.redhat.io \
        --docker-username='{{ rht_service_token_user }}' \
        --docker-password={{ rht_service_token_password }} \
        -n  {{ API_MANAGER_NS }}

- name: "Download {{ threescale_template }}"
  get_url:
    url: "{{ threescale_template }}"
    dest: "{{ modified_template_path }}"
    force: yes
  when: api_project_result is failed

- name: Place all deployments in a paused state
  replace:
    path: "{{ modified_template_path }}"
    regexp: '(replicas: 1\n)'
    replace: '\1    paused: true\n'

- block:
    - name: Reduce RAM resource limit on _redis_ databases
      command: sed -i 's/32Gi/6Gi/' "{{modified_template_path}}"
  when: is_shared_cluster|bool

- block:
    - name: Reduce RAM resource limit on _redis_ databases
      command: sed -i 's/32Gi/2Gi/' "{{modified_template_path}}"

    - name: Reduce CPU resource limits and requests across all deployments
      replace:
        path: "{{ modified_template_path }}"
        regexp: '(cpu: 500m)'
        replace: 'cpu: 250m'
    - replace:
        path: "{{ modified_template_path }}"
        regexp: '(cpu: "1")'
        replace: 'cpu: 500m'
    - replace:
        path: "{{ modified_template_path }}"
        regexp: '(cpu: 2\n)'
        replace: 'cpu: 500m'
  when: not is_shared_cluster|bool


- name: Process the OpenShift Template and create the OpenShift objects for the 3scale API Management Platform
  shell: |
      oc new-app -f "{{ modified_template_path }}" \
                 -p "MASTER_NAME={{API_MANAGER_NS}}-master" \
                 -p "MASTER_PASSWORD={{amp_master_passwd}}" \
                 -p "MASTER_ACCESS_TOKEN={{master_access_token}}" \
                 -p "TENANT_NAME={{ default_tenant_name  }}" \
                 -p "ADMIN_PASSWORD={{ amp_admin_passwd }}" \
                 -p "ADMIN_ACCESS_TOKEN={{ default_tenant_access_token }}" \
                 -p "WILDCARD_DOMAIN={{ ocp_apps_domain }}" \
                 -n "{{ API_MANAGER_NS }}" \
                 > {{new_app_output}}
  when: api_project_result is failed

- name: output message
  debug:
    msg: new-app output available at {{new_app_output}}
  when: api_project_result is failed

# Only set-up smtp if all settings are correct
# Otherwise, errors will be thrown during provisioning of tenents if smtp settings are incorrect
- name: "Modify smtp config map"
  block:
    - command: oc patch configmap smtp -p "{\"data\":{\"address\":\"{{smtp_host}}\"}}" -n {{API_MANAGER_NS}}
    - command: oc patch configmap smtp -p "{\"data\":{\"port\":\"{{smtp_port}}\"}}" -n {{API_MANAGER_NS}}
    - command: oc patch configmap smtp -p "{\"data\":{\"authentication\":\"{{smtp_authentication}}\"}}" -n {{API_MANAGER_NS}}
    - command: oc patch configmap smtp -p "{\"data\":{\"username\":\"{{smtp_userid}}\"}}" -n {{API_MANAGER_NS}}
    - command: oc patch configmap smtp -p "{\"data\":{\"password\":\"{{smtp_passwd}}\"}}" -n {{API_MANAGER_NS}}
  when: smtp_userid != "changeme"


# #### Storage Tier
- name: "Resume {{with_items}}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - backend-redis
    - system-memcache
    - system-mysql
    - system-redis
    - zync-database
  when: api_project_result is failed

- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - backend-redis
      - system-memcache
      - system-mysql
      - system-redis
      - zync-database
  when: api_project_result is failed


# #### Backend Listeners
- name: "Resume {{with_items}}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - backend-listener
    - backend-worker
  when: api_project_result is failed
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - backend-listener
      - backend-worker
  when: api_project_result is failed

# #### System Tier
- name: "Resume {{with_items}}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - system-app
  when: api_project_result is failed
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - system-app
  when: api_project_result is failed

# #### Utility Tier
- name: "Resume {{with_items}}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - system-sidekiq
    - system-sphinx
    - backend-cron
  when: api_project_result is failed
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - system-sidekiq
      - system-sphinx
      - backend-cron
  when: api_project_result is failed


# #### Gateway Tier
- name: "Resume {{with_items}}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - apicast-staging
    - apicast-production
  when: RESUME_CONTROL_PLANE_GWS and api_project_result is failed
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - apicast-staging
      - apicast-production
  when: RESUME_CONTROL_PLANE_GWS and api_project_result is failed

# #### Zync / RHSSO Sync Tier
- name: "Resume {{with_items}}"
  command: oc rollout resume dc/"{{ item }}" -n "{{ API_MANAGER_NS }}"
  with_items:
    - zync
    - zync-que
  when: api_project_result is failed
- include_tasks: wait_for_deploy.yml
  vars:
    pod_to_wait:
      - zync
      - zync-que
  when: api_project_result is failed

###################################################################

# #######   End of Installation of Apicurio Studio, Microcks, 3scale and RHSSO   ############## #
